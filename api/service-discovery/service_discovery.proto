syntax = "proto3";

package opscontrol.api.servicediscovery;

import "envoy/config/core/v3/address.proto";
import "envoy/extensions/filters/http/jwt_authn/v3/config.proto";

enum ServiceType {
    SERVICE_TYPE_HTTP1_SERVER = 0;
    SERVICE_TYPE_GRPC_SERVICE = 1;
}

message Routing {
    string virtual_host_name = 1;
    repeated string match_domains = 2;
    repeated string match_path_prefixes = 3;
}

message CorsPolicy {
    repeated string expose_headers = 1;
    repeated string allow_methods = 2;
    repeated string allow_headers = 3;
    string max_age = 4;
}

message ServiceCluster {
    string service_cluster_name = 1;
    string xds_cluster_name = 2;
    ServiceType service_type = 3;
    uint32 min_healthy_percentage = 4;
    IngressType ingress_type = 5;
    Routing routing = 6;
    uint32 upstream_port = 7;
    CorsPolicy cors_policy = 8;
}

message Endpoint {
    string address = 1;
    uint32 port_value = 2;
    envoy.config.core.v3.SocketAddress.Protocol protocol = 3;
}

message ServiceEndpoints {
    string service_cluster_name = 1;

    repeated Endpoint endpoints = 2;
}

enum IngressType {
    INGRESS_TYPE_NO_INGRESS = 0;
    INGRESS_TYPE_WEB_SECURE_TRAFFIC = 1;
}

message HealthCheck {
    string path = 1;
    map<string, uint32> cluster_min_healthy_percentages = 2;
}

message GrpcWeb {
    bool enabled = 1;
    envoy.extensions.filters.http.jwt_authn.v3.JwtAuthentication jwt_authentication = 2;
}

message Ingress {
    IngressType ingress_type = 1;
    string xds_cluster_name = 2;
    uint32 listen_port = 3;
    string listen_address = 4;
    bool enable_cors = 5;
    HealthCheck health_check = 6;
    GrpcWeb grpc_web = 7;
}
