// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        (unknown)
// source: api/service-discovery/service_discovery.proto

package service_discovery

import (
	v35 "github.com/envoyproxy/go-control-plane/envoy/config/cluster/v3"
	_ "github.com/envoyproxy/go-control-plane/envoy/config/core/v3"
	v37 "github.com/envoyproxy/go-control-plane/envoy/config/endpoint/v3"
	v36 "github.com/envoyproxy/go-control-plane/envoy/config/listener/v3"
	v34 "github.com/envoyproxy/go-control-plane/envoy/config/route/v3"
	v3 "github.com/envoyproxy/go-control-plane/envoy/extensions/filters/http/cors/v3"
	v32 "github.com/envoyproxy/go-control-plane/envoy/extensions/filters/http/grpc_web/v3"
	v31 "github.com/envoyproxy/go-control-plane/envoy/extensions/filters/http/health_check/v3"
	v33 "github.com/envoyproxy/go-control-plane/envoy/extensions/filters/http/jwt_authn/v3"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type AcmeProtocolCertificate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Example:
	// Let's Encrypt production: https://acme-v02.api.letsencrypt.org/directory
	// Let's Encrypt staging (default): https://acme-staging-v02.api.letsencrypt.org/directory
	CaDirUrl string `protobuf:"bytes,1,opt,name=ca_dir_url,json=caDirUrl,proto3" json:"ca_dir_url,omitempty"`
	// Account e-mail
	AccountEmail string `protobuf:"bytes,2,opt,name=account_email,json=accountEmail,proto3" json:"account_email,omitempty"`
	// Parameter key to a file parameter type to store certificate data
	CertificateParameterKey string `protobuf:"bytes,3,opt,name=certificate_parameter_key,json=certificateParameterKey,proto3" json:"certificate_parameter_key,omitempty"`
	// Parameter key to a file parameter type to store account data
	AccountParameterKey string `protobuf:"bytes,4,opt,name=account_parameter_key,json=accountParameterKey,proto3" json:"account_parameter_key,omitempty"`
	// KeyType: EC256, EC384. RSA2048, RSA4096, RSA8192
	// Default: RSA4096
	KeyType             string `protobuf:"bytes,5,opt,name=key_type,json=keyType,proto3" json:"key_type,omitempty"`
	ParameterFileSource string `protobuf:"bytes,6,opt,name=parameter_file_source,json=parameterFileSource,proto3" json:"parameter_file_source,omitempty"`
	// Optional, default is ops-control/latest
	UserAgent string   `protobuf:"bytes,7,opt,name=user_agent,json=userAgent,proto3" json:"user_agent,omitempty"`
	Domains   []string `protobuf:"bytes,8,rep,name=domains,proto3" json:"domains,omitempty"`
}

func (x *AcmeProtocolCertificate) Reset() {
	*x = AcmeProtocolCertificate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_service_discovery_service_discovery_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AcmeProtocolCertificate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AcmeProtocolCertificate) ProtoMessage() {}

func (x *AcmeProtocolCertificate) ProtoReflect() protoreflect.Message {
	mi := &file_api_service_discovery_service_discovery_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AcmeProtocolCertificate.ProtoReflect.Descriptor instead.
func (*AcmeProtocolCertificate) Descriptor() ([]byte, []int) {
	return file_api_service_discovery_service_discovery_proto_rawDescGZIP(), []int{0}
}

func (x *AcmeProtocolCertificate) GetCaDirUrl() string {
	if x != nil {
		return x.CaDirUrl
	}
	return ""
}

func (x *AcmeProtocolCertificate) GetAccountEmail() string {
	if x != nil {
		return x.AccountEmail
	}
	return ""
}

func (x *AcmeProtocolCertificate) GetCertificateParameterKey() string {
	if x != nil {
		return x.CertificateParameterKey
	}
	return ""
}

func (x *AcmeProtocolCertificate) GetAccountParameterKey() string {
	if x != nil {
		return x.AccountParameterKey
	}
	return ""
}

func (x *AcmeProtocolCertificate) GetKeyType() string {
	if x != nil {
		return x.KeyType
	}
	return ""
}

func (x *AcmeProtocolCertificate) GetParameterFileSource() string {
	if x != nil {
		return x.ParameterFileSource
	}
	return ""
}

func (x *AcmeProtocolCertificate) GetUserAgent() string {
	if x != nil {
		return x.UserAgent
	}
	return ""
}

func (x *AcmeProtocolCertificate) GetDomains() []string {
	if x != nil {
		return x.Domains
	}
	return nil
}

type DnsRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Zone       string               `protobuf:"bytes,1,opt,name=zone,proto3" json:"zone,omitempty"`
	RecordName string               `protobuf:"bytes,2,opt,name=record_name,json=recordName,proto3" json:"record_name,omitempty"`
	Ttl        *durationpb.Duration `protobuf:"bytes,3,opt,name=ttl,proto3" json:"ttl,omitempty"`
	CnameValue string               `protobuf:"bytes,4,opt,name=cname_value,json=cnameValue,proto3" json:"cname_value,omitempty"`
}

func (x *DnsRecord) Reset() {
	*x = DnsRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_service_discovery_service_discovery_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DnsRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DnsRecord) ProtoMessage() {}

func (x *DnsRecord) ProtoReflect() protoreflect.Message {
	mi := &file_api_service_discovery_service_discovery_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DnsRecord.ProtoReflect.Descriptor instead.
func (*DnsRecord) Descriptor() ([]byte, []int) {
	return file_api_service_discovery_service_discovery_proto_rawDescGZIP(), []int{1}
}

func (x *DnsRecord) GetZone() string {
	if x != nil {
		return x.Zone
	}
	return ""
}

func (x *DnsRecord) GetRecordName() string {
	if x != nil {
		return x.RecordName
	}
	return ""
}

func (x *DnsRecord) GetTtl() *durationpb.Duration {
	if x != nil {
		return x.Ttl
	}
	return nil
}

func (x *DnsRecord) GetCnameValue() string {
	if x != nil {
		return x.CnameValue
	}
	return ""
}

type Service struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupName                string                       `protobuf:"bytes,14,opt,name=group_name,json=groupName,proto3" json:"group_name,omitempty"`
	ServiceId                string                       `protobuf:"bytes,15,opt,name=service_id,json=serviceId,proto3" json:"service_id,omitempty"`
	XdsClusterName           string                       `protobuf:"bytes,1,opt,name=xds_cluster_name,json=xdsClusterName,proto3" json:"xds_cluster_name,omitempty"`
	ListenPort               uint32                       `protobuf:"varint,2,opt,name=listen_port,json=listenPort,proto3" json:"listen_port,omitempty"`
	ListenAddress            string                       `protobuf:"bytes,3,opt,name=listen_address,json=listenAddress,proto3" json:"listen_address,omitempty"`
	CorsPolicy               *v3.CorsPolicy               `protobuf:"bytes,4,opt,name=cors_policy,json=corsPolicy,proto3" json:"cors_policy,omitempty"`
	HealthCheck              *v31.HealthCheck             `protobuf:"bytes,5,opt,name=health_check,json=healthCheck,proto3" json:"health_check,omitempty"`
	GrpcWeb                  *v32.GrpcWeb                 `protobuf:"bytes,6,opt,name=grpc_web,json=grpcWeb,proto3" json:"grpc_web,omitempty"`
	JwtAuthentication        *v33.JwtAuthentication       `protobuf:"bytes,13,opt,name=jwt_authentication,json=jwtAuthentication,proto3" json:"jwt_authentication,omitempty"`
	DnsRecords               []*DnsRecord                 `protobuf:"bytes,7,rep,name=dns_records,json=dnsRecords,proto3" json:"dns_records,omitempty"`
	AcmeProtocolCertificates []*AcmeProtocolCertificate   `protobuf:"bytes,8,rep,name=acme_protocol_certificates,json=acmeProtocolCertificates,proto3" json:"acme_protocol_certificates,omitempty"`
	EvountRoutes             []*v34.RouteConfiguration    `protobuf:"bytes,9,rep,name=evount_routes,json=evountRoutes,proto3" json:"evount_routes,omitempty"`
	EnvoyClusters            []*v35.Cluster               `protobuf:"bytes,10,rep,name=envoy_clusters,json=envoyClusters,proto3" json:"envoy_clusters,omitempty"`
	EnvoyListeners           []*v36.Listener              `protobuf:"bytes,11,rep,name=envoy_listeners,json=envoyListeners,proto3" json:"envoy_listeners,omitempty"`
	EnvoyEndpoints           []*v37.ClusterLoadAssignment `protobuf:"bytes,12,rep,name=envoy_endpoints,json=envoyEndpoints,proto3" json:"envoy_endpoints,omitempty"`
}

func (x *Service) Reset() {
	*x = Service{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_service_discovery_service_discovery_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Service) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Service) ProtoMessage() {}

func (x *Service) ProtoReflect() protoreflect.Message {
	mi := &file_api_service_discovery_service_discovery_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Service.ProtoReflect.Descriptor instead.
func (*Service) Descriptor() ([]byte, []int) {
	return file_api_service_discovery_service_discovery_proto_rawDescGZIP(), []int{2}
}

func (x *Service) GetGroupName() string {
	if x != nil {
		return x.GroupName
	}
	return ""
}

func (x *Service) GetServiceId() string {
	if x != nil {
		return x.ServiceId
	}
	return ""
}

func (x *Service) GetXdsClusterName() string {
	if x != nil {
		return x.XdsClusterName
	}
	return ""
}

func (x *Service) GetListenPort() uint32 {
	if x != nil {
		return x.ListenPort
	}
	return 0
}

func (x *Service) GetListenAddress() string {
	if x != nil {
		return x.ListenAddress
	}
	return ""
}

func (x *Service) GetCorsPolicy() *v3.CorsPolicy {
	if x != nil {
		return x.CorsPolicy
	}
	return nil
}

func (x *Service) GetHealthCheck() *v31.HealthCheck {
	if x != nil {
		return x.HealthCheck
	}
	return nil
}

func (x *Service) GetGrpcWeb() *v32.GrpcWeb {
	if x != nil {
		return x.GrpcWeb
	}
	return nil
}

func (x *Service) GetJwtAuthentication() *v33.JwtAuthentication {
	if x != nil {
		return x.JwtAuthentication
	}
	return nil
}

func (x *Service) GetDnsRecords() []*DnsRecord {
	if x != nil {
		return x.DnsRecords
	}
	return nil
}

func (x *Service) GetAcmeProtocolCertificates() []*AcmeProtocolCertificate {
	if x != nil {
		return x.AcmeProtocolCertificates
	}
	return nil
}

func (x *Service) GetEvountRoutes() []*v34.RouteConfiguration {
	if x != nil {
		return x.EvountRoutes
	}
	return nil
}

func (x *Service) GetEnvoyClusters() []*v35.Cluster {
	if x != nil {
		return x.EnvoyClusters
	}
	return nil
}

func (x *Service) GetEnvoyListeners() []*v36.Listener {
	if x != nil {
		return x.EnvoyListeners
	}
	return nil
}

func (x *Service) GetEnvoyEndpoints() []*v37.ClusterLoadAssignment {
	if x != nil {
		return x.EnvoyEndpoints
	}
	return nil
}

var File_api_service_discovery_service_discovery_proto protoreflect.FileDescriptor

var file_api_service_discovery_service_discovery_proto_rawDesc = []byte{
	0x0a, 0x2d, 0x61, 0x70, 0x69, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2d, 0x64, 0x69,
	0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x1f, 0x6f, 0x70, 0x73, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79,
	0x1a, 0x22, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x63,
	0x6f, 0x72, 0x65, 0x2f, 0x76, 0x33, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x25, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2f, 0x76, 0x33, 0x2f, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x27, 0x65, 0x6e, 0x76,
	0x6f, 0x79, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e,
	0x65, 0x72, 0x2f, 0x76, 0x33, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x27, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x76, 0x33, 0x2f, 0x65,
	0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x21, 0x65,
	0x6e, 0x76, 0x6f, 0x79, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x2f, 0x76, 0x33, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x30, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x2f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x68, 0x74, 0x74, 0x70, 0x2f,
	0x63, 0x6f, 0x72, 0x73, 0x2f, 0x76, 0x33, 0x2f, 0x63, 0x6f, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x37, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x68, 0x74, 0x74,
	0x70, 0x2f, 0x6a, 0x77, 0x74, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x6e, 0x2f, 0x76, 0x33, 0x2f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x40, 0x65, 0x6e, 0x76,
	0x6f, 0x79, 0x2f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x68, 0x74, 0x74, 0x70, 0x2f, 0x68, 0x65, 0x61, 0x6c, 0x74,
	0x68, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x2f, 0x76, 0x33, 0x2f, 0x68, 0x65, 0x61, 0x6c, 0x74,
	0x68, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x38, 0x65,
	0x6e, 0x76, 0x6f, 0x79, 0x2f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2f,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x68, 0x74, 0x74, 0x70, 0x2f, 0x67, 0x72, 0x70,
	0x63, 0x5f, 0x77, 0x65, 0x62, 0x2f, 0x76, 0x33, 0x2f, 0x67, 0x72, 0x70, 0x63, 0x5f, 0x77, 0x65,
	0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xd4, 0x02, 0x0a, 0x17, 0x41, 0x63, 0x6d, 0x65,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x0a, 0x63, 0x61, 0x5f, 0x64, 0x69, 0x72, 0x5f, 0x75, 0x72,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x61, 0x44, 0x69, 0x72, 0x55, 0x72,
	0x6c, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x65, 0x6d, 0x61,
	0x69, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x3a, 0x0a, 0x19, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x5f,
	0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x63, 0x65, 0x72, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x4b,
	0x65, 0x79, 0x12, 0x32, 0x0a, 0x15, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x13, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x12, 0x19, 0x0a, 0x08, 0x6b, 0x65, 0x79, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x32, 0x0a, 0x15, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x5f, 0x66,
	0x69, 0x6c, 0x65, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x13, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x46, 0x69, 0x6c, 0x65, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x67,
	0x65, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41,
	0x67, 0x65, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x18,
	0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x22, 0x8e,
	0x01, 0x0a, 0x09, 0x44, 0x6e, 0x73, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x7a, 0x6f, 0x6e, 0x65,
	0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x2b, 0x0a, 0x03, 0x74, 0x74, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x03, 0x74, 0x74, 0x6c, 0x12, 0x1f,
	0x0a, 0x0b, 0x63, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6e, 0x61, 0x6d, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22,
	0xae, 0x08, 0x0a, 0x07, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x78, 0x64, 0x73,
	0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x78, 0x64, 0x73, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x5f, 0x70, 0x6f,
	0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e,
	0x50, 0x6f, 0x72, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6c, 0x69,
	0x73, 0x74, 0x65, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x52, 0x0a, 0x0b, 0x63,
	0x6f, 0x72, 0x73, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x31, 0x2e, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x2e, 0x68, 0x74, 0x74, 0x70,
	0x2e, 0x63, 0x6f, 0x72, 0x73, 0x2e, 0x76, 0x33, 0x2e, 0x43, 0x6f, 0x72, 0x73, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x52, 0x0a, 0x63, 0x6f, 0x72, 0x73, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12,
	0x5d, 0x0a, 0x0c, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2e, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73,
	0x2e, 0x68, 0x74, 0x74, 0x70, 0x2e, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x5f, 0x63, 0x68, 0x65,
	0x63, 0x6b, 0x2e, 0x76, 0x33, 0x2e, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x52, 0x0b, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x12, 0x4d,
	0x0a, 0x08, 0x67, 0x72, 0x70, 0x63, 0x5f, 0x77, 0x65, 0x62, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x32, 0x2e, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x2e, 0x68, 0x74, 0x74, 0x70,
	0x2e, 0x67, 0x72, 0x70, 0x63, 0x5f, 0x77, 0x65, 0x62, 0x2e, 0x76, 0x33, 0x2e, 0x47, 0x72, 0x70,
	0x63, 0x57, 0x65, 0x62, 0x52, 0x07, 0x67, 0x72, 0x70, 0x63, 0x57, 0x65, 0x62, 0x12, 0x6c, 0x0a,
	0x12, 0x6a, 0x77, 0x74, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x65, 0x6e, 0x76, 0x6f,
	0x79, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x73, 0x2e, 0x68, 0x74, 0x74, 0x70, 0x2e, 0x6a, 0x77, 0x74, 0x5f, 0x61, 0x75,
	0x74, 0x68, 0x6e, 0x2e, 0x76, 0x33, 0x2e, 0x4a, 0x77, 0x74, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e,
	0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6a, 0x77, 0x74, 0x41, 0x75, 0x74,
	0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4b, 0x0a, 0x0b, 0x64,
	0x6e, 0x73, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2a, 0x2e, 0x6f, 0x70, 0x73, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x79, 0x2e, 0x44, 0x6e, 0x73, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x0a, 0x64, 0x6e,
	0x73, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x76, 0x0a, 0x1a, 0x61, 0x63, 0x6d, 0x65,
	0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x6f,
	0x70, 0x73, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x41,
	0x63, 0x6d, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x43, 0x65, 0x72, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x18, 0x61, 0x63, 0x6d, 0x65, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73,
	0x12, 0x4e, 0x0a, 0x0d, 0x65, 0x76, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2e, 0x76, 0x33, 0x2e,
	0x52, 0x6f, 0x75, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x0c, 0x65, 0x76, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73,
	0x12, 0x47, 0x0a, 0x0e, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x65, 0x6e, 0x76, 0x6f, 0x79,
	0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e,
	0x76, 0x33, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x0d, 0x65, 0x6e, 0x76, 0x6f,
	0x79, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x12, 0x4b, 0x0a, 0x0f, 0x65, 0x6e, 0x76,
	0x6f, 0x79, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x73, 0x18, 0x0b, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x2e, 0x76, 0x33, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x52, 0x0e, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x4c, 0x69, 0x73,
	0x74, 0x65, 0x6e, 0x65, 0x72, 0x73, 0x12, 0x58, 0x0a, 0x0f, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x5f,
	0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2f, 0x2e, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x65,
	0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x33, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x4c, 0x6f, 0x61, 0x64, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x0e, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73,
	0x42, 0xa0, 0x02, 0x0a, 0x23, 0x63, 0x6f, 0x6d, 0x2e, 0x6f, 0x70, 0x73, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x64,
	0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x42, 0x15, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50,
	0x01, 0x5a, 0x44, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x75, 0x70,
	0x70, 0x65, 0x72, 0x2d, 0x69, 0x6e, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x65, 0x2f, 0x6f, 0x70,
	0x73, 0x2d, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2d, 0x64, 0x69,
	0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0xa2, 0x02, 0x03, 0x4f, 0x41, 0x53, 0xaa, 0x02, 0x1f,
	0x4f, 0x70, 0x73, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x41, 0x70, 0x69, 0x2e, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0xca,
	0x02, 0x1f, 0x4f, 0x70, 0x73, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5c, 0x41, 0x70, 0x69,
	0x5c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x79, 0xe2, 0x02, 0x2b, 0x4f, 0x70, 0x73, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5c, 0x41,
	0x70, 0x69, 0x5c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x79, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea,
	0x02, 0x21, 0x4f, 0x70, 0x73, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x3a, 0x3a, 0x41, 0x70,
	0x69, 0x3a, 0x3a, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x79, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_api_service_discovery_service_discovery_proto_rawDescOnce sync.Once
	file_api_service_discovery_service_discovery_proto_rawDescData = file_api_service_discovery_service_discovery_proto_rawDesc
)

func file_api_service_discovery_service_discovery_proto_rawDescGZIP() []byte {
	file_api_service_discovery_service_discovery_proto_rawDescOnce.Do(func() {
		file_api_service_discovery_service_discovery_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_service_discovery_service_discovery_proto_rawDescData)
	})
	return file_api_service_discovery_service_discovery_proto_rawDescData
}

var file_api_service_discovery_service_discovery_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_api_service_discovery_service_discovery_proto_goTypes = []interface{}{
	(*AcmeProtocolCertificate)(nil),   // 0: opscontrol.api.servicediscovery.AcmeProtocolCertificate
	(*DnsRecord)(nil),                 // 1: opscontrol.api.servicediscovery.DnsRecord
	(*Service)(nil),                   // 2: opscontrol.api.servicediscovery.Service
	(*durationpb.Duration)(nil),       // 3: google.protobuf.Duration
	(*v3.CorsPolicy)(nil),             // 4: envoy.extensions.filters.http.cors.v3.CorsPolicy
	(*v31.HealthCheck)(nil),           // 5: envoy.extensions.filters.http.health_check.v3.HealthCheck
	(*v32.GrpcWeb)(nil),               // 6: envoy.extensions.filters.http.grpc_web.v3.GrpcWeb
	(*v33.JwtAuthentication)(nil),     // 7: envoy.extensions.filters.http.jwt_authn.v3.JwtAuthentication
	(*v34.RouteConfiguration)(nil),    // 8: envoy.config.route.v3.RouteConfiguration
	(*v35.Cluster)(nil),               // 9: envoy.config.cluster.v3.Cluster
	(*v36.Listener)(nil),              // 10: envoy.config.listener.v3.Listener
	(*v37.ClusterLoadAssignment)(nil), // 11: envoy.config.endpoint.v3.ClusterLoadAssignment
}
var file_api_service_discovery_service_discovery_proto_depIdxs = []int32{
	3,  // 0: opscontrol.api.servicediscovery.DnsRecord.ttl:type_name -> google.protobuf.Duration
	4,  // 1: opscontrol.api.servicediscovery.Service.cors_policy:type_name -> envoy.extensions.filters.http.cors.v3.CorsPolicy
	5,  // 2: opscontrol.api.servicediscovery.Service.health_check:type_name -> envoy.extensions.filters.http.health_check.v3.HealthCheck
	6,  // 3: opscontrol.api.servicediscovery.Service.grpc_web:type_name -> envoy.extensions.filters.http.grpc_web.v3.GrpcWeb
	7,  // 4: opscontrol.api.servicediscovery.Service.jwt_authentication:type_name -> envoy.extensions.filters.http.jwt_authn.v3.JwtAuthentication
	1,  // 5: opscontrol.api.servicediscovery.Service.dns_records:type_name -> opscontrol.api.servicediscovery.DnsRecord
	0,  // 6: opscontrol.api.servicediscovery.Service.acme_protocol_certificates:type_name -> opscontrol.api.servicediscovery.AcmeProtocolCertificate
	8,  // 7: opscontrol.api.servicediscovery.Service.evount_routes:type_name -> envoy.config.route.v3.RouteConfiguration
	9,  // 8: opscontrol.api.servicediscovery.Service.envoy_clusters:type_name -> envoy.config.cluster.v3.Cluster
	10, // 9: opscontrol.api.servicediscovery.Service.envoy_listeners:type_name -> envoy.config.listener.v3.Listener
	11, // 10: opscontrol.api.servicediscovery.Service.envoy_endpoints:type_name -> envoy.config.endpoint.v3.ClusterLoadAssignment
	11, // [11:11] is the sub-list for method output_type
	11, // [11:11] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_api_service_discovery_service_discovery_proto_init() }
func file_api_service_discovery_service_discovery_proto_init() {
	if File_api_service_discovery_service_discovery_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_api_service_discovery_service_discovery_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AcmeProtocolCertificate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_service_discovery_service_discovery_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DnsRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_service_discovery_service_discovery_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Service); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_service_discovery_service_discovery_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_api_service_discovery_service_discovery_proto_goTypes,
		DependencyIndexes: file_api_service_discovery_service_discovery_proto_depIdxs,
		MessageInfos:      file_api_service_discovery_service_discovery_proto_msgTypes,
	}.Build()
	File_api_service_discovery_service_discovery_proto = out.File
	file_api_service_discovery_service_discovery_proto_rawDesc = nil
	file_api_service_discovery_service_discovery_proto_goTypes = nil
	file_api_service_discovery_service_discovery_proto_depIdxs = nil
}
